swagger: "2.0"

info:
  title: SendIT API
  description: SendIT is a courier service that helps users deliver parcels to different destinations.
  version: 1.0.0

host: localhost:3000
basePath: /api/v1

produces: application/json

paths:
  /:
    get:
      summary: Query base route
      responses:
        "200":
          description: "API base route"
  /auth/signup:
    post:
      summary: Signup a new user
      consumes: application/json
      parameters:
        - in: body
          name: user
          description: Signup details
          schema:
            $ref: "#/definitions/User"
      responses:
        "201":
          description: User signed up successfully
          schema:
            $ref: "#/responses/AuthSuccess"
        "400":
          $ref: "#/responses/InvalidRequest"
        "409":
          $ref: "#/responses/Conflict"
        "500":
          $ref: "#/responses/InternalServerError"
  /auth/login:
    post:
      summary: Login a user
      parameters:
        - in: body
          description: Login details
          name: login
          schema:
            $ref: "#/definitions/Login"
      responses:
        "200":
          description: User logged in successfully
          schema:
            $ref: "#/responses/AuthSuccess"
        "401":
          $ref: "#/responses/Unauthenticated"
        "500":
          $ref: "#/responses/InternalServerError"
  /parcels:
    post:
      summary: Create a new parcel order
      security:
        - ApiKeyAuth: []
      parameters:
        - in: body
          description: "Parcel details"
          name: createParcel
          schema:
            $ref: "#/definitions/NewParcel"
      responses:
        "201":
          description: "Order placed successfully"
          schema:
            $ref: "#/responses/ParcelCreatedResponse"
        "400":
          $ref: "#/responses/InvalidRequest"
        "401":
          $ref: "#/responses/Unauthenticated"
        "403":
          $ref: "#/responses/Unauthorized"
        "500":
          $ref: "#/responses/InternalServerError"
  /parcels/{id}:
    get:
      summary: View a specific parcel order
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          description: "Id of specific parcel"
          name: id
      responses:
        "200":
          description: "Return parcel details, empty data array if not found"
          schema:
            $ref: "#/responses/ParcelFetchedResponse"
        "401":
          $ref: "#/responses/Unauthenticated"
        "403":
          $ref: "#/responses/Unauthorized"
        "500":
          $ref: "#/responses/InternalServerError"

responses:
  AuthSuccess:
    type: object
    properties:
      status:
        type: integer
        example: 200
      data:
        type: array
        items:
          type: object
          properties:
            users:
              $ref: "#/definitions/User"
            token:
              type: string
  Conflict:
    description: Conflict creating new user
    schema:
      type: object
      properties:
        status:
          type: integer
          example: 409
        error:
          type: string
  InvalidRequest:
    description: Invalid Request
    schema:
      type: object
      properties:
        status:
          type: integer
          example: 400
        error:
          type: string
  InternalServerError:
    description: Internal Server Error
    schema:
      type: object
      properties:
        status:
          type: integer
          example: 500
        error:
          type: string
  ParcelCreatedResponse:
    type: object
    properties:
      status:
        type: string
      data:
        type: array
        items:
          type: object
          properties:
            id:
              type: number
              example: 1
            message:
              type: string
              example: Order placed
  ParcelFetchedResponse:
    type: object
    properties:
      status:
        type: string
      data:
        type: array
        items:
          type: object
          properties:
            id:
              type: number
              example: 1
            placedby:
              type: number
              example: 1
            weight:
              type: integer
              example: 50
            weightmetric:
              type: string
              enum:
                - kg
                - lb
                - t
            senton:
              type: string
              format: date-time
            deliveredton:
              type: string
              format: date-time
            status:
              type: string
              enum:
                - placed
                - transiting
                - delivered
            fromaddress:
              type: string
              example: "source address"
            toaddress:
              type: string
              example: "destination address"
            currentlocation:
              type: string
              example: "current address"
  Unauthenticated:
    description: Authentication failed
    schema:
      type: object
      properties:
        status:
          type: integer
          example: 401
        error:
          type: string
  Unauthorized:
    description: Unauthorized user
    schema:
      type: object
      properties:
        status:
          type: integer
          example: 403
        error:
          type: string

definitions:
  Login:
    type: object
    properties:
      userId:
        type: string
      password:
        type: string
  NewParcel:
    type: object
    properties:
      weight:
        type: integer
      weightmetric:
        type: string
        enum:
          - kg
          - lb
          - t
      from:
        type: string
        example: "source address"
      to:
        type: string
        example: "destination address"
  User:
    type: object
    properties:
      firstname:
        type: string
      lastname:
        type: string
      othernames:
        type: string
      email:
        type: string
      username:
        type: string
      password:
        type: string
      isAdmin:
        type: string
      phone:
        type: string
      required:
        - firstname
        - lastname
        - email
        - username
        - password
        - phone

securityDefinitions:
  ApiKeyAuth:
    type: apiKey
    in: header
    name: x-api-token
